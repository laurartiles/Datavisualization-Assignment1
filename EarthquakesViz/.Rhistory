map.bbox <- c(bottom=-85, top=85, right=190, left=-170)
map <- get_stamenmap(bbox = bbox, zoom=3, maptype='toner-lite')
library(ggmap)
library(ggplot2)
library(ggmap)
map.bbox <- c(bottom=-85, top=85, right=190, left=-170)
map <- get_stamenmap(bbox = bbox, zoom=3, maptype='toner-lite')
map.bbox <- c(bottom=-85, top=85, right=190, left=-170)
map <- get_stamenmap(bbox = map.bbox, zoom=3, maptype='toner-lite')
ggmap(map)
ggmap(map) +
geom_point(data = coords.df, aes(x=Lng, y=Lat, fill="red", alpha=0.8), size=5, shape=21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
coords.df <- data.frame(Lng=earthquakes$Longitude, Lat=earthquakes$Latitude)
earthquakes$Continent <- as.factor(coords2continent(coords.df))
shiny::runApp('MASTER/3Cuatri/DataVisualization/EarthquakesViz')
setwd("~/MASTER/3Cuatri/DataVisualization/EarthquakesViz")
earthquakes<-read.csv('database.csv')
earthquakes$Date <- as.Date(earthquakes$Date, "%m/%d/%Y")
min_date <- min(earthquakes$Date, na.rm = TRUE)
max_date <- max(earthquakes$Date, na.rm = TRUE)
min_magnitude <-  min(earthquakes$Magnitude, na.rm = TRUE)
max_magnitude <- max(earthquakes$Magnitude, na.rm = TRUE)
coords.df <- data.frame(Lng=earthquakes$Longitude, Lat=earthquakes$Latitude)
earthquakes$Continent <- as.factor(coords2continent(coords.df))
CONTINENTS = factor(c("Africa", "Antartica", "Asia", "Australia", "Europe", "North America", "South America", "Ocean"))
earthquakes$DiscreteMagnitude <- floor(earthquakes$Magnitude)
map.bbox <- c(bottom=-85, top=85, right=190, left=-170)
map <- get_stamenmap(bbox = map.bbox, zoom=3, maptype='toner-lite')
ggmap(map) +
geom_point(data = coords.df, aes(x=Lng, y=Lat, fill="red", alpha=0.8), size=5, shape=21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
ggmap(map) +
geom_point(data = coords.df, aes(x=Lng, y=Lat, fill="red", alpha=0.8), size=5, shape=21) +
guides(fill=FALSE, alpha=FALSE)
map.bbox <- c(bottom=-85, top=85, right=190, left=-170)
map <- get_stamenmap(bbox = map.bbox, zoom=3, maptype='watercolor')
ggmap(map) +
geom_point(data = coords.df, aes(x=Lng, y=Lat, fill="red", alpha=0.8), size=5, shape=21) +
guides(fill=FALSE, alpha=FALSE)
map.bbox <- c(bottom=-90, top=90, right=190, left=-190)
map <- get_stamenmap(bbox = map.bbox, zoom=3, maptype='watercolor')
ggmap(map) +
geom_point(data = coords.df, aes(x=Lng, y=Lat, fill="red", alpha=0.8), size=5, shape=21) +
guides(fill=FALSE, alpha=FALSE)
coords.df <- data.frame(Lng=earthquakes$Longitude, Lat=earthquakes$Latitude) %>% na.omit
ggmap(map) +
geom_point(data = coords.df, aes(x=Lng, y=Lat, fill="red", alpha=0.8), size=5, shape=21) +
guides(fill=FALSE, alpha=FALSE)
map.bbox <- c(bottom=-90, top=90, right=190, left=-190)
map <- get_stamenmap(bbox = map.bbox, zoom=3, maptype='watercolor')
coords.df <- data.frame(Lng=earthquakes$Longitude, Lat=earthquakes$Latitude)
map.bbox <- c(bottom=-85, top=85, right=180, left=-180)
map <- get_stamenmap(bbox = map.bbox, zoom=3, maptype='watercolor')
earthquakes$Continent <- as.factor(coords2continent(coords.df))
CONTINENTS = factor(c("Africa", "Antartica", "Asia", "Australia", "Europe", "North America", "South America", "Ocean"))
earthquakes$DiscreteMagnitude <- floor(earthquakes$Magnitude)
ggmap(map) +
geom_point(data = coords.df, aes(x=Lng, y=Lat, fill="red", alpha=0.8), size=5, shape=21) +
guides(fill=FALSE, alpha=FALSE)
map.bbox <- c(bottom=-85, top=85, right=185, left=-185)
map <- get_stamenmap(bbox = map.bbox, zoom=3, maptype='watercolor')
ggmap(map) +
geom_point(data = coords.df, aes(x=Lng, y=Lat, fill="red", alpha=0.8), size=5, shape=21) +
guides(fill=FALSE, alpha=FALSE)
runApp()
runApp()
runApp()
setwd("~/MASTER/3Cuatri/DataVisualization/EarthquakesViz")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plates = readShapePoly("plates.shp",
+ proj4string=CRS("+proj=longlat"))
readShapePoly("plates.shp")
library(maps)
library(maptools)
readShapePoly("plates.shp")
library(rgdal)
library(sf)
st_read("plates.shp")
st_drivers()
st_read("plates.json")
readShapePoly("plates.json")
st_read("plates.json")
plot(st_read("plates.json"))
plates <- st_read("plates.json")
plates
plates$PlateName
plot(plates$PlateName)
plot(plates$geometry)
ggplot(plates$geometry)
ggplot(plates)
ggplot2(plates)
ggplot(plates)
ggplot(plot(plates)
)
plates
ggplot(data = plates) + geom_sf()
plates <- st_read("plates.json")
runApp()
plates$geometry
runApp()
plates
typeof(plates)
typeof(plates$geometry)
fortify(plates)
fortify(plates$geometry)
runApp()
geojson_read
geojson_read()
library(geojsonio)
install.packages("geojsonio")
library(geojsonio)
fortify(plates$geometry)
jsonify::to_json(plates)
sp.polygons(plates)
sp.polygons(plates$geometry)
readOGR(plates)
readOGR(plates$geometry)
geom_polygon(plates)
fortify(plates)
geom_polygon(data = fortify(plates), aes(x=Long, y=Lat))
runApp()
SpatialPolygonsDataFrame(plates)
SpatialPolygonsDataFrame(plates$geometry)
plates$geometry
plates$geometry %>% select(long, lat)
runApp()
runApp()
runApp()
runApp()
st_transform(plates, 3857)
typeof(st_transform(plates, 3857))
plates
st_transform(plates, 3857)
runApp()
ggmap(plates) + geom_sf()
ggmap() + geom_sf(plates)
plot(plates)
ggplot(plot(plates))
ggplot(fortify(plot(plates)))
ggplot() + geom_sf(plates)
ggplot() + geom_sf(data = plates)
runApp()
runApp()
geom_sf(data=plates)
geom_sf(data=plates)[[1]]
runApp()
1 and 2
1 && 2
runApp()
